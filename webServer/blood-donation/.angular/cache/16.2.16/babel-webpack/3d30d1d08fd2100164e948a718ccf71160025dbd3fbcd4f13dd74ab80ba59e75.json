{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthServiceService {\n  constructor(http) {\n    this.http = http;\n  }\n  signupUser(data) {\n    const apiUrl = `http://localhost:8080/api/add/organisation`;\n    return this.http.post(apiUrl, data);\n  }\n  loginUser(data) {\n    const apiUrl = `http://localhost:8080/api/login/organisation`;\n    return this.http.post(apiUrl, data);\n  }\n  getLoginUser() {\n    const token = localStorage.getItem('authToken');\n    // Ensure that the token is available before making the request\n    if (!token) {\n      throw new Error('Token is missing');\n    }\n    return from(fetch('http://localhost:8080/api/get/login/user', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    }).then(response => response.json()).catch(error => {\n      console.error(error);\n      throw error; // Rethrow so it can be caught in the subscribe block\n    }));\n  }\n\n  static {\n    this.ɵfac = function AuthServiceService_Factory(t) {\n      return new (t || AuthServiceService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthServiceService,\n      factory: AuthServiceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthServiceService","constructor","http","signupUser","data","apiUrl","post","loginUser","getLoginUser","token","localStorage","getItem","Error","from","fetch","method","headers","then","response","json","catch","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Touch\\Downloads\\New-Projects-Area\\web-projects\\Projects\\Projects\\blood-donation\\webServer\\blood-donation\\src\\app\\auth-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthServiceService {\n\nconstructor(private http: HttpClient ) { }\n\nsignupUser(data: any) {\n  const apiUrl: string = `http://localhost:8080/api/add/organisation`;\n  return this.http.post(apiUrl, data)\n}\n\n\nloginUser(data:any){\n  const apiUrl : string = `http://localhost:8080/api/login/organisation`;\n  return this.http.post(apiUrl, data)\n}\n\n\ngetLoginUser(): Observable<any> {\n  const token = localStorage.getItem('authToken');\n  \n  // Ensure that the token is available before making the request\n  if (!token) {\n    throw new Error('Token is missing');\n  }\n\n  return from(\n    fetch('http://localhost:8080/api/get/login/user', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    })\n    .then(response => response.json())\n    .catch(error => {\n      console.error(error);\n      throw error; // Rethrow so it can be caught in the subscribe block\n    })\n  );\n}\n\n\n\n\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,kBAAkB;EAE/BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAiB;EAEzCC,UAAUA,CAACC,IAAS;IAClB,MAAMC,MAAM,GAAW,4CAA4C;IACnE,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAACD,MAAM,EAAED,IAAI,CAAC;EACrC;EAGAG,SAASA,CAACH,IAAQ;IAChB,MAAMC,MAAM,GAAY,8CAA8C;IACtE,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAACD,MAAM,EAAED,IAAI,CAAC;EACrC;EAGAI,YAAYA,CAAA;IACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAE/C;IACA,IAAI,CAACF,KAAK,EAAE;MACV,MAAM,IAAIG,KAAK,CAAC,kBAAkB,CAAC;;IAGrC,OAAOC,IAAI,CACTC,KAAK,CAAC,0CAA0C,EAAE;MAChDC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUP,KAAK;;KAEnC,CAAC,CACDQ,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAG;MACbC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,MAAMA,KAAK,CAAC,CAAC;IACf,CAAC,CAAC,CACH;EACH;;;;uBArCarB,kBAAkB,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAlB1B,kBAAkB;MAAA2B,OAAA,EAAlB3B,kBAAkB,CAAA4B,IAAA;MAAAC,UAAA,EAHjB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}