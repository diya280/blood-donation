{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let SignupComponent = class SignupComponent {\n  ngOnInit() {}\n  constructor(service, toast, route, fb) {\n    this.service = service;\n    this.toast = toast;\n    this.fb = fb;\n    this.signupForm = this.fb.group({\n      organisationName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      email: ['', [Validators.required, Validators.email]],\n      contact: ['', [Validators.required, Validators.pattern(/^\\d{10}$/)]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', Validators.required],\n      streetAddress: ['', [Validators.required, Validators.minLength(5)]],\n      city: ['', [Validators.required, Validators.minLength(2)]],\n      district: ['', [Validators.required, Validators.minLength(2)]],\n      block: ['', [Validators.required, Validators.minLength(2)]],\n      zipCode: ['', [Validators.required, Validators.pattern(/^\\d{5,6}$/)]],\n      state: ['', [Validators.required, Validators.minLength(2)]]\n    }, {\n      validator: this.passwordMatchValidator\n    });\n  }\n  // Custom validator for matching passwords\n  passwordMatchValidator(group) {\n    const password = group.get('password')?.value;\n    const confirmPassword = group.get('confirmPassword')?.value;\n    return password === confirmPassword ? null : {\n      'passwordMismatch': true\n    };\n  }\n  onSubmit() {\n    if (this.signupForm.valid) {\n      const formData = new FormData();\n      formData.append('organisationName', this.signupForm.get('organisationName')?.value);\n      formData.append('email', this.signupForm.get('email')?.value);\n      formData.append('contact', this.signupForm.get('contact')?.value);\n      formData.append('password', this.signupForm.get('password')?.value);\n      formData.append('streetAddress', this.signupForm.get('streetAddress')?.value);\n      formData.append('city', this.signupForm.get('city')?.value);\n      formData.append('district', this.signupForm.get('district')?.value);\n      formData.append('block', this.signupForm.get('block')?.value);\n      formData.append('zipCode', this.signupForm.get('zipCode')?.value);\n      formData.append('state', this.signupForm.get('state')?.value);\n      // formData.forEach((value, key) => {\n      //   console.log(key + value)\n      // });\n      this.service.signupUser(formData).subscribe(res => {\n        console.log('Form submitted successfully:', res);\n      }, error => {\n        console.error('Error during signup:', error);\n      });\n    } else {\n      console.error('Form is invalid');\n    }\n  }\n};\nSignupComponent = __decorate([Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})], SignupComponent);","map":{"version":3,"names":["Component","Validators","SignupComponent","ngOnInit","constructor","service","toast","route","fb","signupForm","group","organisationName","required","minLength","maxLength","email","contact","pattern","password","confirmPassword","streetAddress","city","district","block","zipCode","state","validator","passwordMatchValidator","get","value","onSubmit","valid","formData","FormData","append","signupUser","subscribe","res","console","log","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Touch\\Downloads\\New-Projects-Area\\web-projects\\Projects\\Projects\\blood-donation\\webServer\\blood-donation\\src\\app\\signup\\signup.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthServiceService } from '../auth-service.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n  \n  ngOnInit(): void {}\n  signupForm: FormGroup;\n\n constructor(private service: AuthServiceService,private toast:\n    private route: Router, private fb: FormBuilder) {\n    this.signupForm = this.fb.group({\n      organisationName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      email: ['', [Validators.required, Validators.email]],\n      contact: ['', [Validators.required, Validators.pattern(/^\\d{10}$/)]], \n      password: ['', [Validators.required, Validators.minLength(8)]], \n      confirmPassword: ['', Validators.required], \n      streetAddress: ['', [Validators.required, Validators.minLength(5)]],\n      city: ['', [Validators.required, Validators.minLength(2)]],\n      district: ['', [Validators.required, Validators.minLength(2)]],\n      block: ['', [Validators.required, Validators.minLength(2)]],\n      zipCode: ['', [Validators.required, Validators.pattern(/^\\d{5,6}$/)]], \n      state: ['', [Validators.required, Validators.minLength(2)]],\n    }, { validator: this.passwordMatchValidator });\n  }\n\n  // Custom validator for matching passwords\n  passwordMatchValidator(group: FormGroup): { [key: string]: boolean } | null {\n    const password = group.get('password')?.value;\n    const confirmPassword = group.get('confirmPassword')?.value;\n    return password === confirmPassword ? null : { 'passwordMismatch': true };\n  }\n\n\n  onSubmit() {\n  \n    if (this.signupForm.valid) {\n      const formData = new FormData();\n\n    formData.append('organisationName', this.signupForm.get('organisationName')?.value);\n    formData.append('email', this.signupForm.get('email')?.value);\n    formData.append('contact', this.signupForm.get('contact')?.value);\n    formData.append('password', this.signupForm.get('password')?.value);\n    formData.append('streetAddress', this.signupForm.get('streetAddress')?.value);\n    formData.append('city', this.signupForm.get('city')?.value);\n    formData.append('district', this.signupForm.get('district')?.value);\n    formData.append('block', this.signupForm.get('block')?.value);\n    formData.append('zipCode', this.signupForm.get('zipCode')?.value);\n    formData.append('state', this.signupForm.get('state')?.value);\n\n    // formData.forEach((value, key) => {\n    //   console.log(key + value)\n    // });\n  \n      this.service.signupUser(formData).subscribe(\n        (res: any) => {\n          console.log('Form submitted successfully:', res);\n        },\n        (error: any) => {\n          console.error('Error during signup:', error);\n        }\n      );\n    } else {\n      console.error('Form is invalid');\n    }\n  }\n  \n  \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}